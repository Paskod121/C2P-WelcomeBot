/**
 * Service pour la gestion des membres
 * G√®re les op√©rations li√©es aux membres de la communaut√© C2P
 */

const Membre = require('../modeles/Membre');
const logger = require('../utilitaires/logger');
const serviceWhatsApp = require('./serviceWhatsApp');

/**
 * Service pour g√©rer les op√©rations li√©es aux membres
 */
class ServiceMembre {
  /**
   * Cr√©e un nouveau membre dans la base de donn√©es
   * @param {object} donneesMembre - Donn√©es du nouveau membre
   * @returns {Promise<object>} Le membre cr√©√©
   */
  async creerMembre(donneesMembre) {
    try {
      // V√©rifier si le membre existe d√©j√†
      const membreExistant = await Membre.findOne({ numeroWhatsApp: donneesMembre.numeroWhatsApp });
      
      if (membreExistant) {
        logger.info(`Le membre avec le num√©ro ${donneesMembre.numeroWhatsApp} existe d√©j√†`);
        return membreExistant;
      }
      
      // Cr√©er un nouveau membre
      const nouveauMembre = new Membre(donneesMembre);
      await nouveauMembre.save();
      
      logger.info(`Nouveau membre cr√©√©: ${nouveauMembre.nom} (${nouveauMembre.numeroWhatsApp})`);
      return nouveauMembre;
    } catch (erreur) {
      logger.error(`Erreur lors de la cr√©ation du membre: ${erreur.message}`);
      throw erreur;
    }
  }

  /**
   * R√©cup√®re un membre par son num√©ro WhatsApp
   * @param {string} numeroWhatsApp - Num√©ro WhatsApp du membre
   * @returns {Promise<object|null>} Le membre trouv√© ou null
   */
  async trouverMembreParNumero(numeroWhatsApp) {
    try {
      // Normaliser le num√©ro (supprimer le pr√©fixe "whatsapp:" s'il existe)
      const numeroNormalise = numeroWhatsApp.replace('whatsapp:', '');
      
      // Chercher le membre
      const membre = await Membre.findOne({ 
        numeroWhatsApp: { $in: [numeroWhatsApp, numeroNormalise] } 
      });
      
      return membre;
    } catch (erreur) {
      logger.error(`Erreur lors de la recherche du membre: ${erreur.message}`);
      throw erreur;
    }
  }

  /**
   * V√©rifie si un num√©ro WhatsApp correspond √† un membre existant
   * @param {string} numeroWhatsApp - Num√©ro WhatsApp √† v√©rifier
   * @returns {Promise<boolean>} True si le membre existe, false sinon
   */
  async estMembreExistant(numeroWhatsApp) {
    const membre = await this.trouverMembreParNumero(numeroWhatsApp);
    return !!membre;
  }

  /**
   * Met √† jour les informations d'un membre
   * @param {string} numeroWhatsApp - Num√©ro WhatsApp du membre
   * @param {object} miseAJour - Donn√©es √† mettre √† jour
   * @returns {Promise<object|null>} Le membre mis √† jour ou null
   */
  async mettreAJourMembre(numeroWhatsApp, miseAJour) {
    try {
      const membreModifie = await Membre.findOneAndUpdate(
        { numeroWhatsApp: numeroWhatsApp },
        { $set: miseAJour },
        { new: true }
      );
      
      if (membreModifie) {
        logger.info(`Membre mis √† jour: ${membreModifie.nom} (${membreModifie.numeroWhatsApp})`);
      } else {
        logger.warn(`Tentative de mise √† jour d'un membre inexistant: ${numeroWhatsApp}`);
      }
      
      return membreModifie;
    } catch (erreur) {
      logger.error(`Erreur lors de la mise √† jour du membre: ${erreur.message}`);
      throw erreur;
    }
  }

  /**
   * Met √† jour la progression d'un membre sur une th√©matique
   * @param {string} numeroWhatsApp - Num√©ro WhatsApp du membre
   * @param {string} thematique - Th√©matique du langage C
   * @param {number} progression - Valeur de progression (pourcentage)
   * @returns {Promise<object|null>} Le membre mis √† jour ou null
   */
  async mettreAJourProgression(numeroWhatsApp, thematique, progression) {
    try {
      const membre = await this.trouverMembreParNumero(numeroWhatsApp);
      
      if (!membre) {
        logger.warn(`Membre non trouv√©: ${numeroWhatsApp}`);
        return null;
      }
      
      // Mettre √† jour la progression
      const miseAJour = {};
      miseAJour[`progressionLanguageC.${thematique}`] = progression;
      
      const membreModifie = await Membre.findByIdAndUpdate(
        membre._id,
        { $set: miseAJour },
        { new: true }
      );
      
      logger.info(`Progression mise √† jour pour ${membre.nom}: ${thematique} = ${progression}%`);
      return membreModifie;
    } catch (erreur) {
      logger.error(`Erreur lors de la mise √† jour de la progression: ${erreur.message}`);
      throw erreur;
    }
  }

  /**
   * Ajoute un quiz compl√©t√© au profil du membre
   * @param {string} numeroWhatsApp - Num√©ro WhatsApp du membre
   * @param {string} quizId - ID du quiz compl√©t√©
   * @param {number} score - Score obtenu au quiz
   * @returns {Promise<object|null>} Le membre mis √† jour ou null
   */
  async ajouterQuizComplete(numeroWhatsApp, quizId, score) {
    try {
      const membre = await this.trouverMembreParNumero(numeroWhatsApp);
      
      if (!membre) {
        logger.warn(`Membre non trouv√©: ${numeroWhatsApp}`);
        return null;
      }
      
      // Ajouter le quiz compl√©t√©
      membre.quizCompletes.push({
        quizId,
        score,
        date: new Date()
      });
      
      await membre.save();
      logger.info(`Quiz compl√©t√© ajout√© pour ${membre.nom}: ${quizId} avec score ${score}%`);
      
      return membre;
    } catch (erreur) {
      logger.error(`Erreur lors de l'ajout du quiz compl√©t√©: ${erreur.message}`);
      throw erreur;
    }
  }

  /**
   * Envoie un message de bienvenue √† un nouveau membre
   * @param {string} numeroWhatsApp - Num√©ro WhatsApp du membre
   * @returns {Promise<object>} R√©sultat de l'envoi du message
   */
  async envoyerMessageBienvenue(numeroWhatsApp) {
    try {
      const messageBienvenue = `üëã *Bienvenue dans la communaut√© C2P (C 1er Pas)* ! Je suis le bot assistant du groupe. Pour mieux te conna√Ætre et personnaliser ton exp√©rience, merci de te pr√©senter en r√©pondant aux questions suivantes :

1Ô∏è‚É£ Ton nom et pr√©nom :
2Ô∏è‚É£ Ton pays :
3Ô∏è‚É£ Ton √©cole/universit√© :
4Ô∏è‚É£ Ta facult√©/domaine d'√©tudes :
5Ô∏è‚É£ Ton niveau d'√©tude actuel :
6Ô∏è‚É£ Ta motivation pour rejoindre C2P et ce que tu souhaites apprendre :

Une fois ta pr√©sentation compl√©t√©e, je t'enverrai des ressources pour d√©marrer avec le langage C et te tiendrai inform√©(e) des prochaines s√©ances ! üöÄ`;

      return serviceWhatsApp.envoyerMessage(numeroWhatsApp, messageBienvenue);
    } catch (erreur) {
      logger.error(`Erreur lors de l'envoi du message de bienvenue: ${erreur.message}`);
      throw erreur;
    }
  }

  /**
   * Enregistre une question pos√©e par un membre
   * @param {string} numeroWhatsApp - Num√©ro WhatsApp du membre
   * @param {string} question - Question pos√©e
   * @returns {Promise<object|null>} Le membre mis √† jour ou null
   */
  async enregistrerQuestion(numeroWhatsApp, question) {
    try {
      const membre = await this.trouverMembreParNumero(numeroWhatsApp);
      
      if (!membre) {
        logger.warn(`Membre non trouv√©: ${numeroWhatsApp}`);
        return null;
      }
      
      // Ajouter la question √† l'historique
      membre.questionsRecentes.push({
        texte: question,
        date: new Date(),
        repondue: false
      });
      
      // Ne garder que les 10 questions les plus r√©centes
      if (membre.questionsRecentes.length > 10) {
        membre.questionsRecentes = membre.questionsRecentes.slice(-10);
      }
      
      // Mettre √† jour la date de derni√®re activit√©
      membre.derniereActivite = new Date();
      
      await membre.save();
      logger.info(`Question enregistr√©e pour ${membre.nom}: "${question.substring(0, 50)}..."`);
      
      return membre;
    } catch (erreur) {
      logger.error(`Erreur lors de l'enregistrement de la question: ${erreur.message}`);
      throw erreur;
    }
  }

  /**
   * R√©cup√®re les membres inactifs depuis une certaine p√©riode
   * @param {number} joursInactivite - Nombre de jours d'inactivit√©
   * @returns {Promise<Array>} Liste des membres inactifs
   */
  async trouverMembresInactifs(joursInactivite = 30) {
    try {
      const dateLimit = new Date();
      dateLimit.setDate(dateLimit.getDate() - joursInactivite);
      
      const membresInactifs = await Membre.find({
        derniereActivite: { $lt: dateLimit },
        actif: true
      });
      
      logger.info(`${membresInactifs.length} membres inactifs depuis plus de ${joursInactivite} jours trouv√©s`);
      return membresInactifs;
    } catch (erreur) {
      logger.error(`Erreur lors de la recherche des membres inactifs: ${erreur.message}`);
      throw erreur;
    }
  }
}

// Exporter une instance unique du service
module.exports = new ServiceMembre();